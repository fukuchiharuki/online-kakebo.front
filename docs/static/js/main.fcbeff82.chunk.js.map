{"version":3,"sources":["model/read/aggregation/useFetch.ts","page/Dashboard.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AccountItemType","DataSource","init","script","data","Object","assign","this","url","resource","MonthlySummary","value","filter収入","totalAmount","filter支出","filter特別費","支出","特別費","収入","特別費を除いた支出","Aggregation","values","map","it","MonthlyAggregation","length","currentMonthAggregation","slice","of","month","AccountItem","amount","reduce","acc","filter","is収入","is特別費","accountItem","behaviorOf","category","accountItemType","食費","食費_個別","日用品費","娯楽費","医療費","水道光熱費","通信費","住居費","元入金","initialState","useFetch","dataSource","aggregation","useState","state","setState","useEffect","a","fetch","response","ok","json","Dashboard","props","dataSouce","search","urlSearchParams","URLSearchParams","get","location","isEmpty","currentMonthSummary","className","toLocaleString","特別費を含めた差引","history","createBrowserHistory","dashboard","App","path","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fcbeff82.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\n\nexport class DataSource {\n  script!: string;\n  data!: string;\n\n  constructor(init: Partial<DataSource>) {\n    Object.assign(this, init);\n  }\n\n  aggregation(): string {\n    return this.url(\"aggregation\");\n  }\n\n  url(resource: string): string {\n    return `https://script.google.com/macros/s/${this.script}/exec?resource=${resource}&id=${this.data}`;\n  }\n};\n\nclass MonthlySummary {\n  value!: MonthlyAggregation;\n\n  private constructor(init: MonthlyAggregation) {\n    this.value = init;\n  }\n\n  static of(init: MonthlyAggregation): MonthlySummary {\n    return new MonthlySummary(init);\n  }\n\n  収入() {\n    return this.value.filter収入().totalAmount();\n  }\n\n  支出() {\n    return this.value.filter支出().totalAmount();\n  }\n\n  特別費() {\n    return this.value.filter特別費().totalAmount();\n  }\n\n  特別費を除いた支出() {\n    return this.支出() - this.特別費();\n  }\n\n  特別費を含めない差引() {\n    return this.収入() - this.特別費を除いた支出();\n  }\n\n  特別費を含めた差引() {\n    return this.収入() - this.支出();\n  }\n}\n\nclass Aggregation {\n  values!: MonthlyAggregation[];\n\n  constructor(init: Partial<Aggregation>) {\n    Object.assign(this, { values: init.values?.map(it => new MonthlyAggregation(it)) });\n  }\n\n  isEmpty(): boolean {\n    return this.values.length == 0;\n  }\n\n  currentMonthSummary(): MonthlySummary {\n    const currentMonthAggregation = this.values.slice(-1)[0];\n    return MonthlySummary.of(currentMonthAggregation);\n  }\n}\n\nclass MonthlyAggregation {\n  month!: string;\n  data!: AccountItem[];\n\n  constructor(init: Partial<MonthlyAggregation>) {\n    Object.assign(this, { ...init, data: init.data?.map(it => new AccountItem(it)) });\n  }\n\n  totalAmount(): number {\n    return this.data\n      .map(it => it.amount)\n      .reduce((acc, amount) => acc + amount);\n  }\n\n  filter収入(): MonthlyAggregation {\n    return new MonthlyAggregation({\n      month: this.month,\n      data: this.data.filter(it => it.is収入())\n    });\n  }\n  \n  filter支出(): MonthlyAggregation {\n    return new MonthlyAggregation({\n      month: this.month,\n      data: this.data.filter(it => !it.is収入()) \n    });\n  }\n\n  filter特別費(): MonthlyAggregation {\n    return new MonthlyAggregation({\n      month: this.month,\n      data: this.data.filter(it => it.is特別費())\n    });\n  }\n}\n\nclass AccountItem {\n  accountItem!: AccountItemType;\n  amount!: number;\n\n  constructor(init: Partial<AccountItem>) {\n    Object.assign(this, init);\n  }\n\n  is収入(): boolean {\n    return behaviorOf(this.accountItem).is収入();\n  }\n\n  is特別費(): boolean {\n    return behaviorOf(this.accountItem).is特別費();\n  }\n\n  category(): AccountItemType {\n    return behaviorOf(this.accountItem).category();\n  }\n}\n\nenum AccountItemType {\n  食費 = \"食費\",\n  食費_個別 = \"食費(個別)\",\n  日用品費 = \"日用品費\",\n  娯楽費 = \"娯楽費\",\n  医療費 = \"医療費\",\n  水道光熱費 = \"水道光熱費\",\n  通信費 = \"通信費\",\n  住居費 = \"住居費\",\n  特別費 = \"特別費\",\n  元入金 = \"元入金\",\n}\n\nfunction behaviorOf(accountItemType: AccountItemType) {\n  switch (accountItemType) {\n    case AccountItemType.食費:\n      return { is収入: () => false, is特別費: () => false, category: () => AccountItemType.食費 };\n    case AccountItemType.食費_個別:\n      return { is収入: () => false, is特別費: () => false, category: () => AccountItemType.食費 };\n    case AccountItemType.日用品費:\n      return { is収入: () => false, is特別費: () => false, category: () => AccountItemType.日用品費 };\n    case AccountItemType.娯楽費:\n      return { is収入: () => false, is特別費: () => false, category: () => AccountItemType.娯楽費 };\n    case AccountItemType.医療費:\n      return { is収入: () => false, is特別費: () => false, category: () => AccountItemType.医療費 };\n    case AccountItemType.水道光熱費:\n      return { is収入: () => false, is特別費: () => false, category: () => AccountItemType.水道光熱費 };\n    case AccountItemType.通信費:\n      return { is収入: () => false, is特別費: () => false, category: () => AccountItemType.通信費 };\n    case AccountItemType.住居費:\n      return { is収入: () => false, is特別費: () => false, category: () => AccountItemType.住居費 };\n    case AccountItemType.特別費:\n      return { is収入: () => false, is特別費: () => true, category: () => AccountItemType.特別費 };\n    case AccountItemType.元入金:\n      return { is収入: () => true, is特別費: () => false, category: () => AccountItemType.元入金 };\n  }\n}\n\nconst initialState = new Aggregation({ values: [] });\n\nfunction useFetch(dataSource: DataSource) {\n  const url = dataSource.aggregation();\n  const [state, setState] = useState(initialState)\n  useEffect(() => {\n    (async () => {\n      const response = await fetch(url)\n      if (response.ok) {\n        const aggregation = new Aggregation({ values: await response.json() });\n        setState(aggregation);\n      } else {\n        setState(initialState);\n      }\n    })();\n  }, [url])\n  return state;\n}\n\nexport default useFetch;\n","import { Fragment } from 'react';\nimport { RouterProps } from 'App';\nimport useFetch, { DataSource } from 'model/read/aggregation/useFetch';\n\ntype Props = RouterProps;\n\nfunction Dashboard(props: Props) {\n  const dataSouce = dataSource(props.location.search);\n  const aggregation = useFetch(dataSouce);\n  if (aggregation.isEmpty()) return <Fragment></Fragment>;\n  const currentMonthSummary = aggregation.currentMonthSummary()\n  return (\n    <Fragment>\n      <header>\n        <h1>Online KAKEBO</h1>\n      </header>\n      <div>\n        <h2>今月</h2>\n        <dl className=\"current-month-summary\">\n          <dt>収入</dt>\n          <dd>{currentMonthSummary.収入().toLocaleString()}</dd>\n          <dt>支出</dt>\n          <dd>{currentMonthSummary.特別費を除いた支出().toLocaleString()}</dd>\n          <dd>(+ 特別費: {currentMonthSummary.特別費().toLocaleString()})</dd>\n          <dt>差引</dt>\n          <dd>{currentMonthSummary.特別費を含めた差引().toLocaleString()}</dd>\n          <dd>(特別費込: {currentMonthSummary.特別費を含めた差引().toLocaleString()})</dd>\n        </dl>\n      </div>\n    </Fragment>\n  );\n}\n\nfunction dataSource(search: string): DataSource {\n  const urlSearchParams = new URLSearchParams(search)\n  const script = urlSearchParams.get(\"script\")!;\n  const data = urlSearchParams.get(\"data\")!;\n  return new DataSource({ script, data });\n}\n\nexport default Dashboard;\n","import { Route, Router } from 'react-router';\nimport { createBrowserHistory } from \"history\";\nimport Dashboard from 'page/Dashboard';\n\nconst history = createBrowserHistory();\n\nfunction App() {\n  return (\n    <Router history={history}>\n      <Route path=\"/\" render={dashboard} />\n    </Router>\n  );\n}\n\nfunction dashboard(props: any) { return <Dashboard {...props} /> }\n\nexport default App;\n\nexport type RouterProps = {\n  location: {\n    search: string\n  };\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}